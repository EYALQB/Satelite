import sys
import matplotlib.pyplot as plt
import re
import numpy as np
from mpl_toolkits.mplot3d import Axes3D
import matplotlib

# Use TkAgg backend for interactive plotting
matplotlib.use('TkAgg')

# Regular expression to extract the X, Y, and Z coordinates from the input
regex = re.compile(r"Position: \(X: ([\d\.-]+) m, Y: ([\d\.-]+) m, Z: ([\d\.-]+) m\)")

# Initialize lists to store the X, Y, Z coordinates for plotting
x_vals = []
y_vals = []
z_vals = []

# Initialize coordinates
x, y, z = 0, 0, 0

# Constants
R_EARTH = 6371000  # Radius of Earth in meters

# Set up the plot
plt.ion()  # Turn on interactive mode for dynamic updates
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Draw the Earth's surface as a sphere
u = np.linspace(0, 2 * np.pi, 100)
v = np.linspace(0, np.pi, 100)
x_sphere = R_EARTH * np.outer(np.cos(u), np.sin(v))
y_sphere = R_EARTH * np.outer(np.sin(u), np.sin(v))
z_sphere = R_EARTH * np.outer(np.ones(np.size(u)), np.cos(v))
ax.plot_surface(x_sphere, y_sphere, z_sphere, color='orange', alpha=0.5, label='Earth')

# Set initial plot limits
ax.set_xlim(-7e6, 7e6)
ax.set_ylim(-7e6, 7e6)
ax.set_zlim(-7e6, 7e6)
ax.set_xlabel('X (meters)')
ax.set_ylabel('Y (meters)')
ax.set_zlabel('Z (meters)')
ax.set_title('Satellite Equatorial Orbit')
ax.legend()

# Flag to indicate if the window is closed
window_closed = False

def on_close(event):
    global window_closed
    print("Window closed")
    window_closed = True
    plt.close('all')
    sys.exit(0)

fig.canvas.mpl_connect('close_event', on_close)

# Plot satellite orbit
orbit_plot, = ax.plot3D([], [], [], 'b-', label='Satellite Orbit')

# Plot current satellite position
current_point = ax.scatter([], [], [], color='red', s=50, label='Current Position')

# Read from serial port
import serial
ser = serial.Serial('COM3', 9600, timeout=1)

while not window_closed:
    if ser.in_waiting <= 0:
        continue

    line = ser.readline().decode('utf-8').rstrip()

    # Search for the line containing the satellite's position
    match = regex.search(line)
    if match:
        x = float(match.group(1))
        y = float(match.group(2))
        z = float(match.group(3))
        print(f"X: {x}, Y: {y}, Z: {z}")

        # Append the new position to the lists
        x_vals.append(x)
        y_vals.append(y)
        z_vals.append(z)

        # Update the orbit plot
        orbit_plot.set_data_3d(x_vals, y_vals, z_vals)

        # Update the position of the current point
        current_point._offsets3d = (np.array([x]), np.array([y]), np.array([z]))

        # Update plot limits if needed
        max_range = max(map(abs, x_vals + y_vals + z_vals)) * 1.1
        ax.set_xlim(-max_range, max_range)
        ax.set_ylim(-max_range, max_range)
        ax.set_zlim(-max_range, max_range)

    plt.draw()
    fig.canvas.flush_events()

plt.ioff()
plt.show()
